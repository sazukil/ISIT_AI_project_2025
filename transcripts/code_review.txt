 Перед просмотром этого видео нужно получить подарок. Мы дарим подписку на наш телеграм канал. Там много всего полезного, ищусь мимосики и всякие активности. Ссылка в описании. Бывало ли у тебя такое, что хотел сделать что-то важное на каком-нибудь сайте, а он упал и вставать не собирается? Это очень неприятно, особенно когда после падения этого сервисы вся работа просто встает. Вдвонение приятно становится, если ты сам стал причиной этого инцидента и пытался в пятницу вечером поднять прот. Короче, так или иначе программы могут ломаться. Или тех, кто уже давно программирует это не новость. Причем, частая причина поломок в самом разработчики или даже в целой команде разработчиков. Справится с тем, что разробы косячет, когда пишут кот, вряд ли получится. Это нормально, и от этого не уйти. Но все же ошибок в приложении, которым пользуется люди, допускать нельзя. Ведь даже несколько минут простой могут стоить компании много денег и репутации. Тут спасает подход, который используется во многих сферах не только в программировании. Своиобразные контроль качества, когда одни люди просто проверяют других людей. Войти этот процесс назвали «код ревью», или если импорта заместить, коды смотрены. На этом моменте может возникнуть вопрос. А зачем тогда тестирование и авто тесты? Если забегать вперед, то на самом деле код ревью используется не только для того, чтобы выявить явные синтоксические ошибки. В таком, явных ошибок спокойные авто тесты справляется, и мы даже сделали про них отдельный видос. У код ревью целебо интереснее. Для начала давай определимся. Код ревью – это процесс, при котором разработчики проверяют кот своих коллег на качество и понятность. Чаще всего разработчики побольше проверяют коллег поменьше. То есть, тем лиды или ведущие разработчики, так как они уже шишек на били и знают, как можно накосячить. Сам по себе код ревью проходит в рамках одной команды. Так как здесь важно, чтобы проверяющие разбирались в техническом стеке и архитектуре проверяемого проекта. Этим чаще всего занимается именно тем лиды, потому что у опыта у них уже много, и к тому же, если они на позиции руководителя, то и софт скиллые у них хорошие. То есть, скорее всего, после встреченного ужаса они не побегут, давать пожописотруднику, отдадут ему конструктивную и понятную обратную связь. Что очень важно в этом процессе. Ведь код ревью не только спасает проект от не минуемого фиаска, но еще и обучается отрудника. Еще код ревью играет важную роль в командной работе. Ведь каждый может писать код по-своему. А потом другим придется разбираться в понописанных спагете. Да и в целом полезно узнать о будущих изменениях в коде или новом функционале. Кстати, существуют специальные программы, которые фарматируют и подгоняют написанный код под принятое в команде стандарты. Их называют форматировщики и линтеры, что первые, что вторые часто дополнительно загружаются в проект. Например, в Пайтане есть форматировщики Black и Yap, в которой могут буквально одной командой подогнать все файлы проекты под единую структуру. А в Джалоскрипте есть очень мощные форматировщики, одновременно линтер, Yasslint, который называется в честь стандарта написания коды на этом языке. При встроивании в редактор он может в реальном времени при сохранении файла улучшать его структуру. Но такие программы вряд ли могут решить проблему читаемости и чистоты кода полностью, чаще всего их предел от именять ковычки соотступами. А в остальном, без человеческого взгляда тяжело найти реальные проблемы читаемости коды. Окей, разобравшийся тем, зачем код ревью существует, нужно понять то, как оно проходит. Потому что когда ты будучи новичком слышишь, что тебя это ждет, можешь напугаться. На самом деле тут мало страшного. Начнем с того, что весь этот процесс сейчас такой простой, и возможен благодаря специальным сервисам для хранения всех изменений происходящих в коде. Да, сейчас мы просистемы контроля версии и специальной сайта, где хранится исходный код программ. Сначала разработчик решает какую-нибудь рабочую задачу, пилетфичи, правит баги, и потом сохраняет сделанные изменения, делая так называемый «комит». Это когда фиксируется именно сделанный изменение относительно предыдущих. Все изменения сохраняются в репозитории. Причем там сохраняется не только изменение, но и то, кто их сделал и когда их сделал. Работает это чаще всего с помощью популярной системы контроля версии Git. После фиксирования сделанных изменений именно нужно поделиться с другими членами команды и в целом код с их хранить написанный код в каком-то месте, которое от этого сюда доступна. Просто локально на нашем компактеере код доступен только нам и агенту фабэр. Для этого как раз используются сервисы для удаленного хранения репозитория. Самая популярная – это Git Hub, Git Hub и BitBucket. Причем Git Hub – это еще и целая социальная сеть для программистов, а Git Hub – это прям мощный корпоративный комбайн для работы с кодом. Вот как раз значительные удобства в этом процессе делают именно эти сервисы. Иписанный код не сразу попадает в общую кучку коды. Сначала создаются пул реквест. Он же запрос на внесение изменений. Где-то он называется «мерш реквест». В нем видны все изменения в коде, что добавилось, что удалилось и дополнительно разработчикописывает то, что он там по написал. Вот мои плавно подошли к самому код ревью. Проверяющий или ревьювер читается начало описания пул реквеста и залазит читать сам код. В первую очередь проверяется то, насколько грамотно написан код. Иначе, насколько все логично, понятно эффективно. Потом код проверяется на всякие ошибки. Синтексические, логические, архитектурные, стилистические. Например, ты задумал со временописание кода и сделал вызовый к базиданных в цикле. И все даже будет работать и теста будут проходить. Но вот на деле кажется, что эта часть кода работает очень медленно. Вот тут как раз на ревью твои коллеги могут заметить эту оплошность и подсказать тебе, что тут можно заменить цикл на один запрос, который сходит в базу один раз и все будет тип топ. Еще это полезно, когда ты пахтишь на задачу ни один день, и твой глаз уже замылился, а ревьювер свежим с глядом может быстро пробежаться по коду и найти какой-нибудь неприятный косяк, который может стрельнуть в особом случае. После просмотра ревьювер оставляет комментарии, если что-то не так, кто рассказывает, а может и показывает это. Или ревьювер может позадовать вопросы. Например, зачем в Кодии используется какая-нибудь конструкция? Или сколько надо купить денег, чтобы было больше денег? Кстати, смотри. О, вот ты попался. Подставляй плечо. Хотя, можно не подставлять, если послушаешь дальше. Мы тут хотим сказать, что если ты новичок и тебе интересно разработка, или ты уже пишешь кот, но хочешь поменять язык, или ты уже войти, но хочешь улучшить свою резюме, то специально для тебя у нас есть курт спайтн программи с нуля, в котором звучим как и самое основе языка, так и научимся работать с популярными фрэмворками Джангу и фласк. Писать авто тесты, чтобы замечать ошибки еще до ревью, а в конце сделаем полоценный проект Каталок-фильмов. Кстати, вместе с самим курсом, в подарок ты получишь бабра, курс по английскому языку и курс по турдоустройству, чтобы найти работу где-нибудь в Гугле. Ладно, бабра не гарантиру. А еще курс можно оплатить кусочками с помощью расрочки и сервисы долями. Причем это бесплатно нужно только за курс заплатить. Ссылка в описании лягушонок. Как и обещали плечо, можешь не подставлять. Если ты пропустил видео до этого момента, то подставляй плечо. Окей, немного отвлеклись, давай продолжим. Так вот, ревьювер либо в итоге пропускает твой код дальше и он вставляется в общий код, либо отправляет код тебе на доработку вместе с вопросами и с правлениями. Причем ревью на этом может не закончиться. Возможно, после этого все соберутся на сазвон, чтобы обсудить, как не допускать ошибки допущенные в Коде, или как проблема можно решать. То есть, в итоге код ревью решает две основные задачи. Засещает программа от багов и помогает разработчикам в команде становиться лучше, изучая новые практики и справляется ошибками. Это как такое обмен знаниями внутри команды. Если ранее никогда в этом процессе не участвовал, то давай мы дадим тебе горсточку советов, которые помогут быстренько его пройти. Во-первых, готовься к код ревью заранее. Добавляй комментарии, документируй его и, возможно, даже перечитывай. Во-вторых, соблюдай стандарт и принятый в команде. Используй форматировщики и линтеры, которых мы ранее говорили. В-третьих, подпишись на наш YouTube канал и поставь лайк этому видео. Еще обязательно отвечай на комментариевювера и учись на допущенных ошибках, чтобы потом код ревью проходил быстрее. Задавай вопросы и будь вежлив, ведь у ревювера нет цели тебя за кибербургить. Вы в одной лодке. А когда готовишь публиквесты, старайся разбивать их на части. Чем меньше изменений в ПР, тем проще его проверять. Ну а когда сам будешь ревьюить код, помни, что нужно обсуждать, а не критиковать. Не надо просто говорить, здесь плохо. Лучше предложить альтернативу или спросить, почему так было сделано. Ну и главное не бойся. Это абсолютно обычный процесс, и наоборот, круто, когда он есть. Под конец вопрос, ответ на который нужно написать в комментах. Как думаешь, какие проблемы могут возникнуть, если в команде код ревью не практикуется? А мы пошли код ревьюить видосики-прокотов. Покеда.